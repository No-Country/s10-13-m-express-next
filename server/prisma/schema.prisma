// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  firstName         String
  lastName          String
  birthday          DateTime?
  phone             String
  email             String           @unique
  role              role?
  password          String
  bannerImage       String?
  username          String
  profileImage      String?
  orgName           String?
  posts             Posts[]
  volunteers        Volunteers[]
  initiatives       Initiative[] 
  Session           Session[]
  reviews           Review[]
}


model Posts {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  userId            String          @db.ObjectId
  user              User            @relation(fields: [userId], references: [id])
  description       String 
  createdAt         DateTime        @default(now())
  galery            String?
}


 model Session {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  userId            String          @db.ObjectId
  expires           DateTime
  User              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    
  }



model Initiative {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String
  deadLine          DateTime
  startDate         DateTime
  endDate           DateTime
  galery            String?
  thumbnail         String?
  volunteers        Volunteers[] 
  ownerId           String         @db.ObjectId
  user              User           @relation( fields: [ownerId], references: [id])
  categoryId        String         @db.ObjectId
  reviewsId         String[]       @db.ObjectId
  postsId           String[]       @db.ObjectId
  createdAt         DateTime       @map("_created_at") @default(now())
  updatedAt         DateTime       @map("_updated_at") @updatedAt
}

model Volunteers{
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  volunteersId      String         @db.ObjectId
  volunteer         Initiative     @relation( fields: [volunteersId], references: [id])
  user              User           @relation(fields: [userId], references: [id])
  userId            String         @db.ObjectId
  status            Status         @default(pending)
  createdAt         DateTime       @map("_created_at") @default(now())
  updatedAt         DateTime       @map("_updated_at") @updatedAt
}

model Review {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  body              String
  rating            String
  dateReview        DateTime       @default(now())
  userIDs           String?        @db.ObjectId
  users             User?          @relation(fields: [userIDs], references: [id])
}


enum role {
  volunteer
  organization
}


enum Status {
  pending
  acepted
  refused
}